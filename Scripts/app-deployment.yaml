############################################################
# @author Elias De Hondt, Kobe Wijnants, Quinten Willekens #
# @since 18/09/2024                                        #
############################################################
---
# Namespace for Jellyfin
apiVersion: v1
kind: Namespace
metadata:
  name: jellyfin
---
# Config Storage (Jellyfin-WebApp)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-config-pvc
  namespace: jellyfin
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Media Storage (Jellyfin-WebApp)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-media-pvc
  namespace: jellyfin
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
# Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: jellyfin
spec:
  replicas: 3
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      containers:
        - name: jellyfin
          image: jellyfin/jellyfin:latest
          ports:
            - containerPort: 8096
              name: jellyfin-port
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          volumeMounts:
            - name: jellyfin-config
              mountPath: /config
            - name: jellyfin-media
              mountPath: /media
      volumes:
        - name: jellyfin-config
          persistentVolumeClaim:
            claimName: jellyfin-config-pvc
        - name: jellyfin-media
          persistentVolumeClaim:
            claimName: jellyfin-media-pvc
---
# Jellyfin Service
apiVersion: v1
kind: Service
metadata:
  name: jellyfin-service
  namespace: jellyfin
spec:
  selector:
    app: jellyfin
  ports:
    - protocol: TCP
      port: 443           # External Port (Ingress)
      targetPort: 8096    # Internal Port (Jellyfin)
---
# MySQL StatefulSet for Master-Slave Configuration
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: jellyfin
spec:
  serviceName: "mysql"
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: jellyfin_root_password
            - name: MYSQL_DATABASE
              value: jellyfin
            - name: MYSQL_USER
              value: jellyfin
            - name: MYSQL_PASSWORD
              value: jellyfin_password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
---
# MySQL Headless Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: jellyfin
spec:
  clusterIP: None
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
  selector:
    app: mysql
---
# Horizontal Pod Autoscaler (HPA)
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: jellyfin-hpa
  namespace: jellyfin
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: jellyfin
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
---
# Allow External Connections
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: elias.dehondt@outlook.com
    privateKeySecretRef:
      name: k8-jellyfin-tls-production
    solvers:
    - http01:
        ingress:
          class: nginx
---
# Ingress for Jellyfin
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP" # Traffic from Ingress to Service
  name: jellyfin-ingress
  namespace: jellyfin
spec:
  ingressClassName: nginx
  rules:
    - host: app.nepfliks.eliasdh.com
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: jellyfin-service
              port:
                number: 443 # External Port (Ingress)
  tls:
    - hosts:
        - app.nepfliks.eliasdh.com
      secretName: k8-jellyfin-tls-production
---